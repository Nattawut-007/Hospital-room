#!/usr/bin/env python3
"""
Hospital Room API Tests using pytest
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡πÅ‡∏•‡∏∞ API endpoints ‡∏î‡πâ‡∏ß‡∏¢ pytest framework
"""

import os
import pytest
import requests
import pymongo
from datetime import datetime
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()


class TestConfig:
    """Configuration for tests"""
    BASE_URL = "http://127.0.0.1:5000/api"
    TEST_USER = {
        "username": "pytest_user",
        "password": "pytest_password123"
    }
    TEST_STUDENT = {
        "student_id": "PYTEST001",
        "name": "Pytest Test Student",
        "age": 21,
        "department": "Software Engineering",
        "grade_level": "Year 3"
    }
    TEST_MEDICINE = {
        "name": "Pytest Medicine",
        "brand": "Pytest Brand",
        "stock": 50
    }


@pytest.fixture(scope="session")
def mongodb_client():
    """MongoDB connection fixture"""
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ config ‡∏à‡∏≤‡∏Å environment
    mongo_user = os.getenv('MONGO_USER')
    mongo_pass = os.getenv('MONGO_PASS')
    mongo_host = os.getenv('MONGO_HOST', 'localhost')
    mongo_port = os.getenv('MONGO_PORT', '27017')
    mongo_db = os.getenv('MONGO_DB', 'hospital_room')
    mongo_auth_db = os.getenv('MONGO_AUTH_DB', 'admin')
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á connection string
    if mongo_user and mongo_pass:
        uri = f"mongodb://{mongo_user}:{mongo_pass}@{mongo_host}:{mongo_port}/{mongo_db}?authSource={mongo_auth_db}"
    else:
        uri = f"mongodb://{mongo_host}:{mongo_port}/{mongo_db}"
    
    try:
        client = pymongo.MongoClient(uri, serverSelectionTimeoutMS=5000)
        client.admin.command('ping')
        yield client
    finally:
        client.close()


@pytest.fixture(scope="session")
def api_session():
    """HTTP session fixture"""
    session = requests.Session()
    session.headers.update({"Content-Type": "application/json"})
    yield session
    session.close()


@pytest.fixture(scope="session")
def authenticated_session(api_session):
    """Authenticated session with JWT token"""
    # ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡∏≠‡∏≤‡∏à‡∏à‡∏∞ fail ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£)
    try:
        api_session.post(f"{TestConfig.BASE_URL}/register", json=TestConfig.TEST_USER)
    except:
        pass
    
    # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    response = api_session.post(f"{TestConfig.BASE_URL}/login", json=TestConfig.TEST_USER)
    assert response.status_code == 200, f"Login failed: {response.text}"
    
    token = response.json().get('access_token')
    assert token, "No access token received"
    
    api_session.headers.update({"Authorization": f"Bearer {token}"})
    return api_session


@pytest.fixture
def sample_student_id(authenticated_session):
    """Create a sample student and return its ID"""
    response = authenticated_session.post(f"{TestConfig.BASE_URL}/students", json=TestConfig.TEST_STUDENT)
    if response.status_code in [200, 201]:
        return TestConfig.TEST_STUDENT['student_id']
    
    # ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á student ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    response = authenticated_session.get(f"{TestConfig.BASE_URL}/students")
    if response.status_code == 200:
        students = response.json()
        if students:
            return students[0]['student_id']
    
    pytest.skip("Cannot create or find any student for testing")


@pytest.fixture
def sample_medicine_id(authenticated_session):
    """Create a sample medicine and return its ID"""
    response = authenticated_session.post(f"{TestConfig.BASE_URL}/medicines", json=TestConfig.TEST_MEDICINE)
    if response.status_code in [200, 201]:
        return response.json()['_id']
    
    # ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á medicine ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    response = authenticated_session.get(f"{TestConfig.BASE_URL}/medicines")
    if response.status_code == 200:
        medicines = response.json()
        if medicines:
            return medicines[0]['_id']
    
    pytest.skip("Cannot create or find any medicine for testing")


class TestMongoDB:
    """Test MongoDB connection and basic operations"""
    
    def test_mongodb_connection(self, mongodb_client):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB"""
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ping
        result = mongodb_client.admin.command('ping')
        assert result['ok'] == 1.0
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö database
        mongo_db = os.getenv('MONGO_DB', 'hospital_room')
        db = mongodb_client[mongo_db]
        collections = db.list_collection_names()
        
        print(f"\nüìä Database: {mongo_db}")
        print(f"üìÅ Collections: {collections}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ collection
        for collection in collections:
            count = db[collection].count_documents({})
            print(f"   - {collection}: {count} documents")
    
    def test_database_collections(self, mongodb_client):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö collections ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
        mongo_db = os.getenv('MONGO_DB', 'hospital_room')
        db = mongodb_client[mongo_db]
        
        expected_collections = ['user']  # collection ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
        for collection in expected_collections:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á collection
            count = db[collection].count_documents({})
            print(f"   ‚úì {collection}: {count} documents")


class TestAuthentication:
    """Test user authentication endpoints"""
    
    def test_user_registration(self, api_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
        test_user = {
            "username": f"test_reg_{datetime.now().microsecond}",
            "password": "test123456"
        }
        
        response = api_session.post(f"{TestConfig.BASE_URL}/register", json=test_user)
        assert response.status_code in [200, 400], f"Registration failed: {response.text}"
        
        if response.status_code == 200:
            assert 'msg' in response.json()
            print(f"‚úÖ Registration: {response.json()['msg']}")
        else:
            # 400 ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á user ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            assert 'already exists' in response.json().get('msg', '').lower()
            print("‚úÖ Registration: User already exists (expected)")
    
    def test_user_login(self, api_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"""
        # ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô
        api_session.post(f"{TestConfig.BASE_URL}/register", json=TestConfig.TEST_USER)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö login
        response = api_session.post(f"{TestConfig.BASE_URL}/login", json=TestConfig.TEST_USER)
        assert response.status_code == 200, f"Login failed: {response.text}"
        
        data = response.json()
        assert 'access_token' in data
        assert len(data['access_token']) > 50  # JWT token should be long
        print(f"‚úÖ Login successful, token length: {len(data['access_token'])}")
    
    def test_invalid_login(self, api_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î"""
        invalid_user = {
            "username": "nonexistent_user",
            "password": "wrong_password"
        }
        
        response = api_session.post(f"{TestConfig.BASE_URL}/login", json=invalid_user)
        assert response.status_code == 401
        assert 'Invalid credentials' in response.json().get('msg', '')
    
    def test_get_users(self, api_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ users"""
        response = api_session.get(f"{TestConfig.BASE_URL}/get_user")
        assert response.status_code == 200
        
        users = response.json()
        assert isinstance(users, list)
        print(f"‚úÖ Found {len(users)} users in system")


class TestStudentsAPI:
    """Test Students API endpoints"""
    
    def test_create_student(self, authenticated_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"""
        student_data = {
            **TestConfig.TEST_STUDENT,
            "student_id": f"CREATE_{datetime.now().microsecond}"
        }
        
        response = authenticated_session.post(f"{TestConfig.BASE_URL}/students", json=student_data)
        assert response.status_code in [200, 201], f"Create student failed: {response.text}"
        
        result = response.json()
        assert 'msg' in result
        print(f"‚úÖ Student created: {student_data['name']}")
    
    def test_get_all_students(self, authenticated_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        response = authenticated_session.get(f"{TestConfig.BASE_URL}/students")
        assert response.status_code == 200, f"Get students failed: {response.text}"
        
        students = response.json()
        assert isinstance(students, list)
        print(f"‚úÖ Found {len(students)} students")
        
        if students:
            student = students[0]
            required_fields = ['id', 'student_id', 'name', 'age', 'department', 'grade_level']
            for field in required_fields:
                assert field in student, f"Missing field: {field}"
    
    def test_update_student(self, authenticated_session, sample_student_id):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"""
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• student ‡∏Å‡πà‡∏≠‡∏ô
        response = authenticated_session.get(f"{TestConfig.BASE_URL}/students")
        assert response.status_code == 200
        
        students = response.json()
        if not students:
            pytest.skip("No students found for update test")
        
        student_obj_id = students[0]['id']
        update_data = {
            "name": "Updated Name",
            "age": 25,
            "department": "Updated Department"
        }
        
        response = authenticated_session.put(
            f"{TestConfig.BASE_URL}/students/{student_obj_id}", 
            json=update_data
        )
        assert response.status_code == 200, f"Update student failed: {response.text}"
        print("‚úÖ Student updated successfully")
    
    def test_delete_student(self, authenticated_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á student ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö
        student_data = {
            **TestConfig.TEST_STUDENT,
            "student_id": f"DELETE_{datetime.now().microsecond}"
        }
        
        create_response = authenticated_session.post(f"{TestConfig.BASE_URL}/students", json=student_data)
        if create_response.status_code not in [200, 201]:
            pytest.skip("Cannot create student for delete test")
        
        # ‡∏î‡∏∂‡∏á ID ‡∏Ç‡∏≠‡∏á student ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
        get_response = authenticated_session.get(f"{TestConfig.BASE_URL}/students")
        students = get_response.json()
        
        target_student = next((s for s in students if s['student_id'] == student_data['student_id']), None)
        if not target_student:
            pytest.skip("Cannot find created student for delete test")
        
        # ‡∏•‡∏ö student
        response = authenticated_session.delete(f"{TestConfig.BASE_URL}/students/{target_student['id']}")
        assert response.status_code == 200, f"Delete student failed: {response.text}"
        print("‚úÖ Student deleted successfully")


class TestMedicinesAPI:
    """Test Medicines API endpoints"""
    
    def test_create_medicine(self, authenticated_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤"""
        medicine_data = {
            **TestConfig.TEST_MEDICINE,
            "name": f"Test Medicine {datetime.now().microsecond}"
        }
        
        response = authenticated_session.post(f"{TestConfig.BASE_URL}/medicines", json=medicine_data)
        assert response.status_code in [200, 201], f"Create medicine failed: {response.text}"
        
        result = response.json()
        assert '_id' in result
        assert result['name'] == medicine_data['name']
        print(f"‚úÖ Medicine created: {result['name']}")
    
    def test_get_all_medicines(self, authenticated_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        response = authenticated_session.get(f"{TestConfig.BASE_URL}/medicines")
        assert response.status_code == 200, f"Get medicines failed: {response.text}"
        
        medicines = response.json()
        assert isinstance(medicines, list)
        print(f"‚úÖ Found {len(medicines)} medicines")
        
        if medicines:
            medicine = medicines[0]
            required_fields = ['_id', 'name', 'brand', 'stock']
            for field in required_fields:
                assert field in medicine, f"Missing field: {field}"
    
    def test_search_medicines(self, authenticated_session, sample_medicine_id):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡∏≤"""
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "Test"
        response = authenticated_session.get(f"{TestConfig.BASE_URL}/medicines/search?q=Test")
        assert response.status_code == 200, f"Search medicines failed: {response.text}"
        
        results = response.json()
        assert isinstance(results, list)
        print(f"‚úÖ Search found {len(results)} medicines with 'Test'")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö search ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ query
        response = authenticated_session.get(f"{TestConfig.BASE_URL}/medicines/search")
        assert response.status_code == 400
        assert 'required' in response.json().get('error', '').lower()
    
    def test_update_medicine(self, authenticated_session, sample_medicine_id):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏¢‡∏≤"""
        update_data = {
            "name": "Updated Medicine Name",
            "stock": 200
        }
        
        response = authenticated_session.put(
            f"{TestConfig.BASE_URL}/medicines/{sample_medicine_id}", 
            json=update_data
        )
        assert response.status_code == 200, f"Update medicine failed: {response.text}"
        
        result = response.json()
        assert result['name'] == update_data['name']
        assert result['stock'] == update_data['stock']
        print("‚úÖ Medicine updated successfully")
    
    def test_delete_medicine(self, authenticated_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏¢‡∏≤"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á medicine ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö
        medicine_data = {
            **TestConfig.TEST_MEDICINE,
            "name": f"Delete Test {datetime.now().microsecond}"
        }
        
        create_response = authenticated_session.post(f"{TestConfig.BASE_URL}/medicines", json=medicine_data)
        if create_response.status_code not in [200, 201]:
            pytest.skip("Cannot create medicine for delete test")
        
        medicine_id = create_response.json()['_id']
        
        # ‡∏•‡∏ö medicine
        response = authenticated_session.delete(f"{TestConfig.BASE_URL}/medicines/{medicine_id}")
        assert response.status_code == 200, f"Delete medicine failed: {response.text}"
        
        result = response.json()
        assert result['_id'] == medicine_id
        print("‚úÖ Medicine deleted successfully")


class TestTreatmentsAPI:
    """Test Treatments API endpoints"""
    
    def test_create_treatment(self, authenticated_session, sample_student_id, sample_medicine_id):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á treatment"""
        treatment_data = {
            "student_id": sample_student_id,
            "symptoms": "Pytest test symptoms - fever, headache",
            "medicine_ids": [sample_medicine_id]
        }
        
        response = authenticated_session.post(f"{TestConfig.BASE_URL}/treatments", json=treatment_data)
        assert response.status_code in [200, 201], f"Create treatment failed: {response.text}"
        
        result = response.json()
        assert '_id' in result
        assert result['symptoms'] == treatment_data['symptoms']
        assert result['student']['id'] is not None
        print(f"‚úÖ Treatment created: {result['_id']}")
    
    def test_get_all_treatments(self, authenticated_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• treatments ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        response = authenticated_session.get(f"{TestConfig.BASE_URL}/treatments")
        assert response.status_code == 200, f"Get treatments failed: {response.text}"
        
        treatments = response.json()
        assert isinstance(treatments, list)
        print(f"‚úÖ Found {len(treatments)} treatments")
        
        if treatments:
            treatment = treatments[0]
            required_fields = ['_id', 'student', 'symptoms', 'medicines', 'date']
            for field in required_fields:
                assert field in treatment, f"Missing field: {field}"
    
    def test_get_treated_students(self, authenticated_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤"""
        response = authenticated_session.get(f"{TestConfig.BASE_URL}/treated_students")
        assert response.status_code == 200, f"Get treated students failed: {response.text}"
        
        students = response.json()
        assert isinstance(students, list)
        print(f"‚úÖ Found {len(students)} treated students")
    
    def test_treatment_history(self, authenticated_session, sample_student_id):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤"""
        response = authenticated_session.get(f"{TestConfig.BASE_URL}/treatment_history/{sample_student_id}")
        assert response.status_code == 200, f"Get treatment history failed: {response.text}"
        
        result = response.json()
        assert 'student' in result
        assert 'treatment_count' in result
        assert 'history' in result
        assert isinstance(result['history'], list)
        print(f"‚úÖ Treatment history: {result['treatment_count']} treatments")


class TestAPIErrors:
    """Test API error handling"""
    
    def test_unauthorized_access(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ token"""
        endpoints = [
            '/students',    # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ /api ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ BASE_URL ‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß
            '/medicines',
            '/treatments'
        ]

        for endpoint in endpoints:
            response = requests.get(f"{TestConfig.BASE_URL}{endpoint}")
            print("Request headers:", response.request.headers)
            print("Response status:", response.status_code, "Body:", response.text)
            assert response.status_code == 401, f"Should require auth: {endpoint}"
    
    def test_nonexistent_resources(self, authenticated_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á resource ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö treatment history ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ
        response = authenticated_session.get(f"{TestConfig.BASE_URL}/treatment_history/NONEXISTENT")
        assert response.status_code == 404
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö medicine ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡πÉ‡∏ä‡πâ ObjectId ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
        fake_id = "507f1f77bcf86cd799439011"
        response = authenticated_session.put(f"{TestConfig.BASE_URL}/medicines/{fake_id}", json={
            "name": "Test Medicine",
            "price": 100
        })
        assert response.status_code == 404
    
    def test_invalid_data(self, authenticated_session):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á student ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ required fields
        invalid_student = {
            "age": 20
            # ‡∏Ç‡∏≤‡∏î name ‡πÅ‡∏•‡∏∞ student_id ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        }
        response = authenticated_session.post(f"{TestConfig.BASE_URL}/students", json=invalid_student)
        assert response.status_code == 400
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á treatment ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ student
        invalid_treatment = {
            "student_id": "NONEXISTENT_STUDENT_ID",
            "symptoms": "Test symptoms",
            "diagnosis": "Test diagnosis"
        }
        response = authenticated_session.post(f"{TestConfig.BASE_URL}/treatments", json=invalid_treatment)
        assert response.status_code in [400, 404]  # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏î‡πâ 400 ‡∏´‡∏£‡∏∑‡∏≠ 404
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á medicine ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ required fields
        invalid_medicine = {
            "description": "Test description"
            # ‡∏Ç‡∏≤‡∏î name ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        }
        response = authenticated_session.post(f"{TestConfig.BASE_URL}/medicines", json=invalid_medicine)
        assert response.status_code == 400


if __name__ == "__main__":
    """‡∏£‡∏±‡∏ô tests ‡∏î‡πâ‡∏ß‡∏¢ pytest"""
    import sys
    
    print("üß™ Running Hospital API Tests with pytest")
    print("=" * 60)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables
    required_vars = ['SECRET_KEY', 'JWT_SECRET_KEY']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ö†Ô∏è  Warning: Missing environment variables: {missing_vars}")
        print("   Please check your .env file")
        print()
    
    # ‡∏£‡∏±‡∏ô pytest
    pytest_args = [
        __file__,
        "-v",           # verbose output
        "-s",           # don't capture output
        "--tb=short",   # short traceback format
        "--color=yes",  # colored output
        "-x",           # stop on first failure
    ]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° arguments ‡∏à‡∏≤‡∏Å command line
    if len(sys.argv) > 1:
        pytest_args.extend(sys.argv[1:])
    
    exit_code = pytest.main(pytest_args)
    sys.exit(exit_code)